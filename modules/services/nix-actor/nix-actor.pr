# All Nix questions require the actor be up.
? <q <nix> > [
  <require-service <daemon nix-actor> >
]

# Resolve an initial capability to an evaluator state.
? <q <nix ?attrs>> [
  ? <service-object <daemon nix-actor> ?obj> [
    $obj ! <set-setting extra-experimental-features "pipe-operators">
    $config ? <q <nix get-setting ?key>> [
      $obj += <get-setting $key <* $config [ <rewrite ?resp <a <nix get-setting $key> $resp> > ]>>
    ]
    $obj += <resolve <nix $attrs>
      <* $config [ <rewrite ?resp <a <nix $attrs> $resp> > ]>>
  ]
]

# Realise a string from an evaluator state.
? <q <nix realise-string ?state>> [
  $state += <realise-string <* $config [ <rewrite ?resp <a <nix realise-string $state> $resp> > ]>>
]

# Evaluate a nix expression in Q/A form.
? <q <nix eval ?state ?expr ?arg>> [
  # <nix eval #f> lands here and causes error=Embedded.
  $state += <eval $expr $arg <* $config [ <rewrite ?resp <a <nix eval $state $expr $arg> $resp>> ]>>
]

# Forward an error at a to b.
? <chain-q-a-error ?a ?b> [
  ? <a $a <error ?err>> [
    <a $b <error $err>>
  ]
]

# Evaluate a nix expression in Q/A form, with an invalid state.
? <q <nix eval #f ?expr ?arg>> [
  let ?req0 = <nix eval #f $expr $arg>
  let ?req1 = <nix { lookupPath: [ ] }>
  <q $req1>
  <chain-q-a-error $req1 $req0>
  ? <a $req1 <ok ?state>> [
    $state += <eval $expr $arg <* $config [ <rewrite ?resp <a $req0 $resp>> ]>>
  ]
]

# Evaluate to a literal value rather than an eval state.
? <q <nix eval-literal ?state ?expr ?arg>> [
  let ?req0 = <nix eval-literal $state $expr $arg>
  let ?req1 = <nix eval $state $expr $arg>
  <q $req1>
  <chain-q-a-error $req1 $req0>
  ? <a $req1 <ok ?state>> [
    $state ? ?v [
      $config += <a $req0 <ok $v>>
    ]
  ]
]

# Import an expression from a file.
? <q <nix import ?path ?args>> [
  let ?req0 = <nix import $path $args>
  let ?req1 = <nix { lookupPath: [ ] }>
  <q $req1>
  <chain-q-a-error $req1 $req0>
  ? <a $req1 <ok ?state>> [
    <chain-q-a
      <nix eval
        $state
        "_: { path, args }: let expr = import path; in if (builtins.isFunction expr) then (expr args) else expr"
        { path: $path args: $args }
      >
      $req0
    >
  ]
]
