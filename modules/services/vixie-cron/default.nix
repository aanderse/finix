{ config, pkgs, lib, ... }:
let
  cfg = config.services.vixie-cron;

  # Vixie cron requires build-time configuration for the sendmail path.
  cron' = pkgs.cron.override {
    sendmailPath = "/run/wrappers/bin/sendmail";
  };

  cronExpr = {
    "@minutely" = "* * * * *";
    "@hourly" = "0 * * * *";
    "@daily" = "0 0 * * *";
    "@monthly" = "0 0 1 * *";
    "@weekly" = "0 0 * * 0";
    "@yearly" = "0 0 1 1 *";
    "@quarterly" = "0 0 1 */3 *";
  };

  pathOrStr = with lib.types; coercedTo path (x: "${x}") str;
  program =
    lib.types.coercedTo (
      lib.types.package
      // {
        # require mainProgram for this conversion
        check = v: v.type or null == "derivation" && v ? meta.mainProgram;
      }
    ) lib.getExe pathOrStr
    // {
      description = "main program, path or command";
      descriptionClass = "conjunction";
    };

  timerOpts = {
    options = {
      enable = lib.mkOption {
        type = lib.types.bool;
        default = true;
      };

      description = lib.mkOption {
        type = lib.types.singleLineStr;
        default = "";
      };

      command = lib.mkOption {
        type = program;
      };

      user = lib.mkOption {
        type = with lib.types; nullOr str;
        default = null;
      };

      # TODO:
      # environment = lib.mkOption {
      #   type = lib.type.attrsOf lib.types.str;
      #   default = { };
      # };
      #
      # randomizedDelaySec = lib.mkOption {
      #   type = lib.types.ints.unsigned;
      #   default = 0;
      # };
      #
      # persistent = lib.mkOption {
      #   type = lib.types.bool;
      #   default = false;
      # }

      startAt = lib.mkOption {
        type = lib.types.str;
      };
    };
  };
in
{
  options.services.vixie-cron = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
    };

    timers = lib.mkOption {
      type = with lib.types; attrsOf (submodule timerOpts);
      default = { };
    };
  };

  config = lib.mkIf cfg.enable {
    environment.etc.crontab = {
      mode = "0600";
      text =
        let
          cronTasks = cfg.timers
            |> lib.filterAttrs (_: v: v.enable)
            |> lib.mapAttrsToList (k: v: ''
              # ${k} - ${v.description}
              ${cronExpr.${v.startAt} or v.startAt} ${if v.user != null then v.user else "root"} ${v.command}
            '')
            |> lib.concatStringsSep "\n"
          ;
        in
        ''
          # generated by nix, do not edit
          SHELL=${pkgs.bash}/bin/bash
          PATH=${config.security.wrapperDir}:${lib.makeBinPath [ pkgs.coreutils ]}

          ${cronTasks}
        '';
    };

    environment.systemPackages = [
      cron'
    ];

    services.tmpfiles.cron.rules = [
      "d /var/cron 0710"

      "d /var/spool 0755 - - -"
      "d /var/spool/cron 0755 - - -"
    ];

    security.wrappers.crontab = {
      setuid = true;
      owner = "root";
      group = "root";
      source = "${cron'}/bin/crontab";
    };

    finit.services.cron = {
      description = "cron daemon";
      conditions = "service/syslogd/ready";
      command = "${cron'}/bin/cron -n";
      notify = "pid";
    };
  };
}
